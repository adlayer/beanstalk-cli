#!/bin/bash
agent=beanstalk-cli

# Process ARGV
command=$1
value=$2
data=$3

# $1 = method
# $2 = path
# $3 = data
function request(){
	if [ $1 == GET ]; then
		curl -G -X ${1} \
			--user-agent $agent \
			-H "Accept: application/json" \
			-H "Content-type: application/json" \
			-d "$3" \
			${domain}/api/${2}.json
		exit
	fi
	
	curl -X ${1} \
		--user-agent $agent \
		-H "Accept: application/json" \
		-H "Content-type: application/json" \
		-d "$3" \
		${domain}/api/${2}.json
}

# Baisc Authetication method
function auth(){
	echo 'Account name:'
	read account

	echo 'Username:'
	read username

	echo 'Password:'
	read -s password
}

# List users
# $value= USER_ID
function users(){
	if [ $value ]; then
		request GET users/${value} | jq '.user' | jq '.name, .email'
		exit
	fi
	request GET users | jq '.[].user' | jq '.id, .name, .email'
}

# Create user using invitations
# $value=name
# $data=email
function create_user(){
	name=$value
	email=$data
	template='{"invitation":{"user": {"email": "val-email","name": "val-name"}}}'
	## Replace
	body=${template/val-email/$email}
	body=${template/val-name/$name}
	echo $body
	##request POST invitations "$body"
}

# List repositories
# $value = REPOSITORY_ID
function repositories(){
	if [ $value ]; then
		request GET repositories/${value} | jq '.repository' | jq '.title, .repository_url'
		exit
	fi
	request GET repositories | jq '.[].repository' | jq '.id, .title, .repository_url'
}

# Alias for repositories
function repos(){
	repositories
}

# $value = REPOSITORY_ID
function envs(){
	request GET ${value}/server_environments | jq '.[].server_environment' | jq '.id, .name'
}

# $value = REPOSITORY_ID
# $data = environament
function servers(){
	#request GET ${value}/release_servers/$data
	#request GET ${value}/release_servers environment_id=${data}
	echo ${value}/release_servers environment_id=${data}
}

# Find All Public Keys
# $value = USER_ID
function keys(){
	if [ $value ]; then
		request GET public_keys user_id=${value} | jq '.[].public_key' | jq '.id, .name, .content'
		exit
	fi
	request GET public_keys | jq '.[].public_key' | jq '.id, .name, .content'
}

# Find Public Key
## Admins can view other usersâ€™ keys. Regular users can view their own keys only.
## $value=PUBLIC_KEY_ID
function key(){
	request GET public_keys/${value} | jq '.public_key' | jq '.content'
}

# Download some kye
## $value=PUBLIC_KEY_ID
function download_key(){
	key >> ${value}_id_rsa.pub
}

# Add a key to authorized keys list
## $value=path/to/key
function add_local_authorized_key(){
	file=$1
	cat $file >> ~/.ssh/authorized_keys
}

# Download and authorize local key
## $value=KEY_ID
function allow_local_key(){
	file=${value}_id_rsa.pub
	download_key $value
	add_local_authorized_key $file
	rm -rf file
}

# Push the key located at ~/.ssh/id_rsa.pub to Beanstalk
function upload_key(){
	if [ "$value" ]; then
		file=$value
	else
		file="$HOME/.ssh/id_rsa.pub"
	fi
	
	key=$(cat $file)
	name=$(hostname)
	data='{"public_key":{"name": "val-name","content": "val-key"}}'
	## Replacements
	data=${data/val-name/$name}
	data=${data/val-key/$key}
	request POST public_keys "$data"
}

# Add generic beanstalk public key as authorized
function allow_deploy(){
	curl -O https://${account}.beanstalkapp.com/beanstalk_rsa.pub
	add_local_authorized_key beanstalk_rsa.pub
	rm -rf beanstalk_rsa.pub
}

# Dispatcher method
function main(){
	echo 'Welcome to Beanstalk-Cli, please give your Beanstalk credentials'
	echo 'Make sure you have allowed the API access in your Beanstalk Account'
	auth
	domain=https://${username}:${password}@${account}.beanstalkapp.com
	$command
}

main